"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/user.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = exports.Detail = exports.Address = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "";
function createBaseAddress() {
    return { street: "", city: "" };
}
exports.Address = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.street !== "") {
            writer.uint32(10).string(message.street);
        }
        if (message.city !== "") {
            writer.uint32(18).string(message.city);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAddress();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.street = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.city = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            street: isSet(object.street) ? globalThis.String(object.street) : "",
            city: isSet(object.city) ? globalThis.String(object.city) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.street !== "") {
            obj.street = message.street;
        }
        if (message.city !== "") {
            obj.city = message.city;
        }
        return obj;
    },
    create: function (base) {
        return exports.Address.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseAddress();
        message.street = (_a = object.street) !== null && _a !== void 0 ? _a : "";
        message.city = (_b = object.city) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseDetail() {
    return { id: 0, name: "" };
}
exports.Detail = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDetail();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create: function (base) {
        return exports.Detail.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseDetail();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUser() {
    return { id: 0, name: "", age: 0, active: false, address: undefined, detail: undefined };
}
exports.User = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.age !== 0) {
            writer.uint32(24).int32(message.age);
        }
        if (message.active !== false) {
            writer.uint32(32).bool(message.active);
        }
        if (message.address !== undefined) {
            exports.Address.encode(message.address, writer.uint32(42).fork()).join();
        }
        if (message.detail !== undefined) {
            exports.Detail.encode(message.detail, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseUser();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.age = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.active = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.address = exports.Address.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.detail = exports.Detail.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            age: isSet(object.age) ? globalThis.Number(object.age) : 0,
            active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
            address: isSet(object.address) ? exports.Address.fromJSON(object.address) : undefined,
            detail: isSet(object.detail) ? exports.Detail.fromJSON(object.detail) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.age !== 0) {
            obj.age = Math.round(message.age);
        }
        if (message.active !== false) {
            obj.active = message.active;
        }
        if (message.address !== undefined) {
            obj.address = exports.Address.toJSON(message.address);
        }
        if (message.detail !== undefined) {
            obj.detail = exports.Detail.toJSON(message.detail);
        }
        return obj;
    },
    create: function (base) {
        return exports.User.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseUser();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.age = (_c = object.age) !== null && _c !== void 0 ? _c : 0;
        message.active = (_d = object.active) !== null && _d !== void 0 ? _d : false;
        message.address = (object.address !== undefined && object.address !== null)
            ? exports.Address.fromPartial(object.address)
            : undefined;
        message.detail = (object.detail !== undefined && object.detail !== null)
            ? exports.Detail.fromPartial(object.detail)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
